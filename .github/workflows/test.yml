name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  build:
    if: "github.repository == 'DataMedSci/gi-yagit' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        include:
          - operating-system: windows-latest
            vcpkgPackages: Qt5 gdcm boost
            vcpkgTriplet: 'x64-windows'
            useVcpkgToolchainFile: true
            cmakeGenerator: 'VS16Win64'
          - operating-system: ubuntu-latest            
            cmakeGenerator: 'Ninja'
            useVcpkgToolchainFile: false
        
    steps:
    - uses: actions/checkout@v2

    - name: Install GCC 10 Linux
      if: ${{ runner.os == 'Linux' }}
      uses: egor-tensin/setup-gcc@v1
      with:
          version: 10
          platform: x64

    - name: Install Linux requirements
      if: ${{ runner.os == 'Linux' }}
      run: |
           sudo apt update
           sudo apt install qt5-default libgdcm3.0 libgdcm-dev libboost-all-dev

# Step below not only installs and does VCPKG setup but also installs dependency packages and store them in cache
# cache is crucial, as installation (compilation from sources) of many dependencies is time consuming
# i.e. wxwidgets needs >10min for installation and <1min for retrieval from cache
    - name: Install Windows requirements
      if: ${{ runner.os == 'Windows' }}
      uses: lukka/run-vcpkg@v7.3
      with:
         vcpkgArguments: '${{ matrix.vcpkgPackages }}'
         vcpkgTriplet: 'x64-windows'
         vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
         vcpkgGitCommitId: 'fdb170fda2daa456a843aa3614e5aca6fffa4d52'

    - name: Configure and build with CMake
      uses: lukka/run-cmake@v3.4
      with:
          vcpkgTriplet: '${{ matrix.vcpkgTriplet }}'  # VCPKG target specification (so called "triplet"), here used only on Windows
          cmakeBuildType: ${{env.BUILD_TYPE}}  # Release or Debug
          cmakeGenerator: '${{ matrix.cmakeGenerator }}'  # specify generator (i.e. Ninja or Visual Studio)
          buildDirectory: 'build'  # subdirectory to store make build and store results
          buildWithCMake: true  # use CMake to trigger build process
          useVcpkgToolchainFile: '${{ matrix.useVcpkgToolchainFile }}'  # use vcpkg to install dependencies (i.e. wxwidgets) on Windows

    - name: Run unit tests
      run: |
           build/bin/release/gi_core_tests --log_level=message
#           build/bin/release/gi_gdcm_wrapper_tests --log_level=message
#     Uncomment section below to enable tests
#     - name: Test
#       working-directory: ${{github.workspace}}/gi_core/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      
